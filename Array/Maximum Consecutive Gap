public class Solution {
    // DO NOT MODIFY THE ARGUMENTS WITH "final" PREFIX. IT IS READ ONLY
    static class pair {

		boolean vis = false;
		int max = Integer.MIN_VALUE;
		int min = Integer.MAX_VALUE;

	}

	public static int maximumGap(int[] arr) {

		if (arr.length <= 1)
			return 0;

		int n = arr.length;

		int max = Integer.MIN_VALUE;
		int min = Integer.MAX_VALUE;

		for (int val : arr) {
			min = Math.min(min, val);
			max = Math.max(max, val);
		}

		int bucketSize = Math.max(1, (max - min) / (n - 1));
//		If all elements are same then size should be 1 as we will divide later by size for idx

// Number of buckets can be greater than n as bucketSize me floor ho gaya. Yaha humne ceil liya hai
		int totalBuckets = (max - min) / bucketSize + 1; 
		pair[] buckets = new pair[totalBuckets];

		for (int i = 0; i <totalBuckets; i++)
			buckets[i] = new pair();

		for (int i = 0; i < n; i++) {
			int idx = (arr[i] - min) / bucketSize;
			buckets[idx].vis = true;
			buckets[idx].max = Math.max(buckets[idx].max, arr[i]);
			buckets[idx].min = Math.min(buckets[idx].min, arr[i]);
		}

//		Successive elements difference is needed in sorted order => (abhi ka min) - (prev filled bucket ka max)

		int ans = 0;
		int curMax = buckets[0].max;

		for (int i = 1; i <totalBuckets; i++) {

			if (!buckets[i].vis)
				continue;

			ans = Math.max(ans, buckets[i].min - curMax);
			curMax = buckets[i].max;

		}

		return ans;
	}
}
