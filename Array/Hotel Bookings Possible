public class Solution {
    
	static class Pair implements Comparable<Pair> {
		int s;
		int e;

		Pair(int s, int e) {
			this.s = s;
			this.e = e;
		}

		@Override
		public int compareTo(Pair o) {
			if (this.e != o.e)
				return this.s - o.s;

			return this.e - o.e;
		}
	}

	public boolean hotel(ArrayList<Integer> a, ArrayList<Integer> b, int k) {

		ArrayList<Pair> l = new ArrayList<>();

		for (int i = 0; i < a.size(); i++) {
			if (a.get(i) != b.get(i)) // for = no need to put as it is always true
				l.add(new Pair(a.get(i), b.get(i)));
		}

		Collections.sort(l);

		PriorityQueue<Integer> pq = new PriorityQueue<>();

		int ms = 0;

		for (int i = 0; i < l.size(); i++) {

	
			while (!pq.isEmpty() && pq.peek() <= l.get(i).s) {
				pq.poll();
			}

			pq.add(l.get(i).e);

			ms = Math.max(ms, pq.size());

			if (ms > k)
				return false;

		}

		return true;

	}

}
