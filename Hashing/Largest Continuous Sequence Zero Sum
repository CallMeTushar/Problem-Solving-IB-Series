public class Solution {
public int[] lszero(int[] arr) {

		if (arr.length == 0) {
			return new int[] {};
		}

		long[] pre = new long[arr.length];
		pre[0] = arr[0];
		int si = 0, ei = -1;
		if (pre[0] == 0) {
			si = 0;
			ei = 0;
		}

		for (int i = 1; i < arr.length; i++) {
			pre[i] = pre[i - 1] + arr[i];

			if (pre[i] == 0) {
				si = 0;
				ei = i;
			}
		}

		HashMap<Long, Integer> map = new HashMap<Long, Integer>();

		for (int i = 0; i < pre.length; i++) {

			if (!map.containsKey(pre[i]))
				map.put(pre[i], i);

			else {

				if (i - map.get(pre[i]) > ei - si + 1) {
					si = map.get(pre[i]) + 1;
					ei = i;
				}

			}

		}

		int[] ans = new int[ei - si + 1];

		for (int i = si; i <= ei; i++) {
			ans[i - si] = arr[i];
		}

		return ans;

	}
}
