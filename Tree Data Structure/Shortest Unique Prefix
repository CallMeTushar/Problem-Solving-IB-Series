public class Solution {
static class Trie {

		private Node root = new Node(); // Data is #

		class Node {
			boolean isTerminal;
			HashMap<Character, Node> map = new HashMap<>();
			int f = 0;
		}

		public void addWord(String word) {
			addWord(0, root, word);
		}

		private void addWord(int i, Node root, String word) {

			root.f++;

			if (i == word.length()) {
				root.isTerminal = true;
				return;
			}
			if (!root.map.containsKey(word.charAt(i))) {
				root.map.put(word.charAt(i), new Node());
			}

			addWord(i + 1, root.map.get(word.charAt(i)), word);

		}

		private String find(String str) {
			return find(0, str, root, "");
		}

		private String find(int i, String str, Node root, String ans) {

			if (i == str.length()) {
				return ans;
			}

			if (root.f == 1) {
				return ans;
			}

			return find(i + 1, str, root.map.get(str.charAt(i)), ans + str.charAt(i));

		}

	}

	public static String[] prefix(String[] str) {

		String[] arr = new String[str.length];

		Trie t = new Trie();

		for (String s : str)
			t.addWord(s);

		for (int i = 0; i < str.length; i++) {
			arr[i] = t.find(str[i]);
		}

		return arr;

	}

}

