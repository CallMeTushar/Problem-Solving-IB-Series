public class Solution {
    public void solveSudoku(ArrayList<ArrayList<Character>> arr) {
		solve(0, 0, arr);
	}

	public boolean solve(int cr, int cc, ArrayList<ArrayList<Character>> arr) {

		if (cc == arr.get(0).size()) {
			cr++;
			cc = 0;
		}

		if (cr == arr.size())
			return true;

		char ch = arr.get(cr).get(cc);

		if (ch != '.')
			return solve(cr, cc + 1, arr);

		else {

			for (char i = '1'; i <= '9'; i++) {

				if (safe(arr, cr, cc, i)) {
					arr.get(cr).set(cc, i);
					boolean ans = solve(cr, cc + 1, arr);
					if (ans)
						return true;

					arr.get(cr).set(cc, '.');
				}

			}

		}

		return false;

	}

	private boolean safe(ArrayList<ArrayList<Character>> arr, int cr, int cc, char val) {

		for (int i = 0; i < arr.size(); i++)
			if (arr.get(cr).get(i) == val || arr.get(i).get(cc) == val)
				return false;

		int mr = 3 * (cr / 3);
		int mc = 3 * (cc / 3);

		for (int i = mr; i < mr + 3; i++)
			for (int j = mc; j < mc + 3; j++)
				if (arr.get(i).get(j) == val)
					return false;

		return true;

	}
}
