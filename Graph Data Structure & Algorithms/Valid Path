public class Solution {
    	public String solve(int a, int b, int n, int r, int[] x, int[] y) {

		int[][] arr = new int[a + 1][b + 1];

		for (int i = 0; i < arr.length; i++) {

			for (int j = 0; j < arr[0].length; j++) {

				for (int k = 0; k < x.length; k++) {

					long d = (long) (r * r) - (x[k] - i) * (x[k] - i) - (y[k] - j) * (y[k] - j);

					if (d >= 0) {
						arr[i][j] = -1;
						break;
					}

				}

			}

		}

		boolean res = dfs(0, 0, arr);

		return res ? "YES" : "NO";

	}

	private boolean dfs(int i, int j, int[][] arr) {

//		-1 : blocked
//		1 : visited
//		0 empty
//		2 true
//		-2 false

		if (i < 0 || j < 0 || i == arr.length || j == arr[0].length || arr[i][j] == 1 || arr[i][j] == -1
				|| arr[i][j] == -2)
			return false;

		if (i == arr.length - 1 && j == arr[0].length - 1) {
			return true;
		}

		if (arr[i][j] == 2) {
			return true;
		}

		boolean res = false;

		arr[i][j] = 1;

		res = res || dfs(i + 1, j, arr);
		res = res || dfs(i, j + 1, arr);
		res = res || dfs(i - 1, j, arr);
		res = res || dfs(i, j - 1, arr);
		res = res || dfs(i + 1, j + 1, arr);
		res = res || dfs(i + 1, j - 1, arr);
		res = res || dfs(i - 1, j + 1, arr);
		res = res || dfs(i - 1, j - 1, arr);

		arr[i][j] = res ? 2 : -2;

		return res;

	}

}
