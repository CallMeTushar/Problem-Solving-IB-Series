public class Solution {
    public static int maximalRectangle(int[][] arr) {

		if (arr.length == 0 || arr[0].length == 0)
			return 0;

		int[] temp = new int[arr[0].length];

		int ans = 0;

		for (int i = 0; i < arr.length; i++) {

			for (int j = 0; j < arr[0].length; j++) {

				if (arr[i][j] == 0) {
					temp[j] = 0;
				}

				else {
					temp[j] += 1;
				}

			}

			int area = maxHistogram(temp);
			ans = Math.max(ans, area);

		}

		return ans;

	}

	public static int maxHistogram(int[] arr) {

		Stack<Integer> s = new Stack<Integer>();
		int ans = 0;

		int i;

		for (i = 0; i < arr.length; i++) {

			while (!s.isEmpty() && arr[s.peek()] > arr[i]) {
				int temp = s.pop();
				int area;

				if (s.isEmpty()) {
					area = arr[temp] * i;
				}

				else {
					area = arr[temp] * (i - s.peek() - 1);
				}

				ans = Math.max(ans, area);
			}

			s.push(i);

		}

		while (!s.isEmpty()) {
			int temp = s.pop();
			int area;

			if (s.isEmpty()) {
				area = arr[temp] * i;
			}

			else {
				area = arr[temp] * (i - s.peek() - 1);
			}

			ans = Math.max(ans, area);
		}

		return ans;
	}
}
