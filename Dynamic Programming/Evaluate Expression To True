public class Solution {
   public static int cnttrue(String str) {
		int[][][] dp = new int[str.length()][str.length()][2];

		for (int[][] a : dp) {
			for (int[] b : a)
				Arrays.fill(b, -1);
		}

		return ways(0, str.length() - 1, str, true, dp);
	}

	private static int ways(int i, int j, String str, boolean val, int[][][] dp) {

		if (j == i) {

			char ch = str.charAt(i);

			if (ch == 'T' && val)
				return 1;

			if (ch == 'F' && !val)
				return 1;

			return 0;
		}

		if (i > j)
			return 0;

		int temp = val ? 0 : 1;

		if (dp[i][j][temp] != -1)
			return dp[i][j][temp];

		int ans = 0;

		for (int k = i; k <= j - 1; k += 2) {

			int leftTrue = ways(i, k, str, true, dp) % 1003;
			int leftFalse = ways(i, k, str, false, dp) % 1003;
			int rightTrue = ways(k + 2, j, str, true, dp) % 1003;
			int rightFalse = ways(k + 2, j, str, false, dp) % 1003;

			char ch = str.charAt(k + 1);

			if (ch == '&') {
				if (val)
					ans = (ans + leftTrue * rightTrue) % 1003;

				else
					ans = (ans + (leftTrue * rightFalse) + (leftFalse * rightFalse) + (leftFalse * rightTrue)) % 1003;
			}

			else if (ch == '|') {
				if (val)
					ans = (ans + (leftTrue * rightFalse) + (leftTrue * rightTrue) + (leftFalse * rightTrue)) % 1003;

				else
					ans = (ans + leftFalse * rightFalse) % 1003;
			}

			else if (ch == '^') {

				if (val)
					ans = (ans + (leftFalse * rightTrue) + (leftTrue * rightFalse)) % 1003;

				else
					ans = (ans + (leftFalse * rightFalse) + (leftTrue * rightTrue)) % 1003;

			}
		}

		return dp[i][j][temp] = ans;

	}

}
