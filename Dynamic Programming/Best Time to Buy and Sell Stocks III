public static int maxProfit2(int k, int[] arr) {
		int[] dp = new int[arr.length + 1];

		if (k >= arr.length/2) {

			int ans = 0;

			for (int i = arr.length - 2; i >= 0; i--) {

				if (arr[i] < arr[i + 1])
					ans += arr[i + 1] - arr[i];

			}

			return ans;

		}

		for (int tran = 0; tran <= k; tran++) {
			int[] temp = new int[arr.length + 1];
			for (int i = arr.length; i >= 0; i--) {

				if (tran == 0 || i == arr.length) {
					temp[i] = 0;
				}

				else {

					int buy = 0;

					for (int j = i + 1; j < arr.length; j++) {
						buy = Math.max(buy, dp[j + 1] + arr[j] - arr[i]);
					}

//				OR Don't buy current stock
					int dontBuy = temp[i + 1];
					temp[i] = Math.max(buy, dontBuy);
				}

			}

			dp = temp;

		}

		return dp[0];

	}

	public static int maxProfit3(int k, int[] arr) {

		if (arr.length <= 1) {
			return 0;
		}

		int[] dp = new int[arr.length + 1];

		for (int tran = 0; tran <= k; tran++) {
			int[] temp = new int[arr.length + 1];
			int maxSum = 0;  // Initialize here !!!
			for (int i = arr.length; i >= 0; i--) {

				if (tran == 0 || i == arr.length) {
					temp[i] = 0;
				}

				else {

					int buy = 0;
					buy = Math.max(buy, maxSum - arr[i]);
					maxSum = Math.max(maxSum, dp[i + 1] + arr[i]);

//				OR Don't buy current stock.
					int dontBuy = temp[i + 1];
					temp[i] = Math.max(buy, dontBuy);
				}

			}

			dp = temp;

		}

		return dp[0];

	}

	public static int maxProfit(int k, int[] arr) {
		int[][] dp = new int[arr.length][k + 1];

		for (int[] a : dp)
			Arrays.fill(a, -1);

		return maxProfit(0, k, arr, dp);
	}

	private static int maxProfit(int i, int tran, int[] arr, int[][] dp) {

		if (tran == 0 || i >= arr.length)
			return 0;

		if (dp[i][tran] != -1)
			return dp[i][tran];

		// Buy current stock and look to sell at a later date
		int buy = 0;

		for (int j = i + 1; j < arr.length; j++) {
			if (arr[j] > arr[i])
				buy = Math.max(buy, maxProfit(j + 1, tran - 1, arr, dp) + arr[j] - arr[i]);
		}

//		OR Don't buy current stock
		int dontBuy = maxProfit(i + 1, tran, arr, dp);

		return dp[i][tran] = Math.max(buy, dontBuy);

	}
